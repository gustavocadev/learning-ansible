---
- name: Wordpress example
  hosts: demo
  become: true
  gather_facts: false
  vars:
    mariadb_root_password: 'password'
    wp_db_name: 'wordpress_db'
    wp_user: 'wordpress'
    wp_password: 'wordpress_pwd'
  tasks:
    - name: update packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: yes

    - name: install apache 2
      ansible.builtin.apt:
        name: apache2
        state: present

    - name: start apache service
      ansible.builtin.systemd_service:
        name: apache2
        # by default, the apache service is not started after installation
        state: started
        # iniciar automaticamente servidor apache
        enabled: true

    - name: Install PHP dependecies
      ansible.builtin.apt:
        name: '{{ item }}'
        state: present
      loop:
        - php
        - php-common
        - php-mysql
        - php-xml
        - php-xmlrpc
        - php-curl
        - php-gd
        - php-imagick
        - php-cli
        - php-dev
        - php-dev
        - php-imap
        - php-mbstring
        - php-opcache
        - php-soap
        - php-zip
        - php-intl
    - name: Install Maria db
      ansible.builtin.apt:
        name: '{{item}}'
        state: present
      loop:
        - mariadb-server
        - mariadb-client

    - name: Start maria db
      ansible.builtin.systemd_service:
        name: mariadb
        state: started
        enabled: true

    - name: Python dependencies
      ansible.builtin.apt:
        name:
          - python3-pip
          - python3-dev
          - libmysqlclient-dev
        state: present

    - name: Ignore PEP 668 because it's silly.
      ansible.builtin.file:
        path: /usr/lib/python3.12/EXTERNALLY-MANAGED
        state: absent

    - name: Install mysqlclient via Pip
      ansible.builtin.pip:
        name: mysqlclient
        state: present

    # Because in linux by default the root user has no password, we need to set it
    - name: Set MariaDB root password
      community.mysql.mysql_user:
        login_user: root # Me conecto como root
        login_password: '' # No tengo contraseña porque es la primera vez que me conecto, osea la contraseña es vacía

        # Ahora le asigno una contraseña al usuario root
        name: root # ¿A que usuario queremos asignar la contraseña?
        password: '{{ mariadb_root_password }}' # This is the password I want to set for the root user
        host: localhost # I want to set the password for the root user that connects from localhost
        priv: '*.*:ALL,GRANT' # I want to give the root user all privileges on all databases and tables, and also the ability to grant privileges to other users
        state: present # I want to ensure that the root user exists with the specified password and privileges
      ignore_errors: true

    - name: Disallow root login remotely
      community.mysql.mysql_user:
        name: root
        host: '{{ item }}'
        login_user: root
        login_password: '{{ mariadb_root_password }}'
        state: absent
      loop:
        # - '{{ ansible_hostname }}'
        - '::1'
        - '127.0.0.1'
        - '%'

    # By default, MySQL creates a test database that is accessible to all users. We will remove it for security reasons.
    - name: Remove test database
      community.mysql.mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: '{{ mariadb_root_password }}'

    - name: Reload privilege tables
      # -ppassword, the first p is the flag for password, and the second p is the password itself, it is not a typo
      ansible.builtin.command: mysql -u root -p"{{ mariadb_root_password }}" -e "FLUSH PRIVILEGES;"

    # I create a database for Wordpress and a user with privileges to that database
    - name: Add Wordpress database
      community.mysql.mysql_db:
        name: '{{  wp_db_name }}' # I create a database called wordpress_db
        state: present
        login_user: root # I connect as root
        login_password: '{{ mariadb_root_password }}' # I use the root password to connect

    - name: Add wordpress user and password
      community.mysql.mysql_user:
        name: '{{ wp_user }}'
        password: '{{wp_password}}'
        host: localhost
        login_user: root
        login_password: '{{ mariadb_root_password }}'
        priv: 'wordpress_db.*:ALL,GRANT'
        state: present
      ignore_errors: true

    - name: Download Wordpress
      ansible.builtin.get_url:
        url: https://wordpress.org/latest.tar.gz
        dest: /tmp/latest.tar.gz

    - name: Unarchive Wordpress
      ansible.builtin.unarchive:
        src: /tmp/latest.tar.gz
        dest: /var/www/html/
        remote_src: yes

    - name: Generate wordpress config
      ansible.builtin.copy:
        remote_src: yes
        src: /var/www/html/wordpress/wp-config-sample.php
        dest: /var/www/html/wordpress/wp-config.php

    - name: Change wordpress permissions
      ansible.builtin.file:
        path: /var/www/html/wordpress
        mode: 0755
        owner: www-data
        group: www-data

    - name: 'Change wp-config'
      ansible.builtin.lineinfile:
        path: /var/www/html/wordpress/wp-config.php
        regexp: '{{ item.regexp }}' # This is the regular expression to search for
        # If the line is not found, it will be added
        # If the line is found, it will be replaced with the new line because of state: present
        line: '{{ item.line }}'
        state: present
      loop:
        - regexp: 'database_name_here'
          line: "define( 'DB_NAME', '{{wp_db_name}}' );"

        - regexp: 'username_here'
          line: "define( 'DB_USER', '{{wp_user}}' );"

        - regexp: 'password_here'
          line: "define( 'DB_PASSWORD', '{{wp_password}}' );"

    - name: Download WordPress keys
      ansible.builtin.shell: |
        curl -s https://api.wordpress.org/secret-key/1.1/salt/ >> /var/www/html/wordpress/wp-config.php

    # We need to generate the Apache configuration file for Wordpress because the default one is not suitable for Wordpress
    - name: Generate wordpress apache conf
      ansible.builtin.copy:
        remote_src: yes
        src: /etc/apache2/sites-available/000-default.conf
        dest: /etc/apache2/sites-available/wordpress.conf

    - name: Change wordpress DocumentRoot
      ansible.builtin.lineinfile:
        path: /etc/apache2/sites-available/wordpress.conf
        regexp: '/var/www/html'
        line: '        DocumentRoot /var/www/html/wordpress'
        state: present

    - name: Enable wordpress site
      ansible.builtin.shell:
        cmd: |
          a2ensite wordpress.conf
          a2dissite 000-default.conf
      args:
        chdir: /etc/apache2/sites-available

    - name: Restart apache service
      ansible.builtin.systemd_service:
        name: apache2
        state: restarted
